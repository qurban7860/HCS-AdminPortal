import { useEffect, useLayoutEffect, useMemo, useState } from 'react';
import { useNavigate,useParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';

// @mui
import { Switch, Card, Grid, Container, Typography, Modal , Fade, Box , Link ,Dialog,  DialogTitle, Stack,Button} from '@mui/material';
import ConfirmDialog from '../../components/confirm-dialog';
// routes
import { PATH_MACHINE , PATH_DASHBOARD } from '../../routes/paths';
// slices
import { getUser,getUsers, deleteUser, setEditFormVisibility } from '../../redux/slices/user';
import Iconify from '../../components/iconify';
import ViewFormSubtitle from '../components/ViewFormSubtitle';
import ViewFormField from '../components/ViewFormField';
import ViewFormAudit from '../components/ViewFormAudit';
import ViewFormEditDeleteButtons from '../components/ViewFormEditDeleteButtons';
import {Cover} from '../components/Cover';
import LogoAvatar from '../../components/logo-avatar/LogoAvatar';
import { useAuthContext } from '../../auth/useAuthContext';
// ----------------------------------------------------------------------
export default function MachineViewForm() {
  const [openConfirm, setOpenConfirm] = useState(false);
const [openPopover, setOpenPopover] = useState(null);
const handleOpenConfirm = () => {
  setOpenConfirm(true);
};
const handleCloseConfirm = () => {
  setOpenConfirm(false);
};
  const { user } = useAuthContext();
  console.log("user : " , user)
    const { id } = useParams();
    const { securityUser } = useSelector((state) => state.user);

  const dispatch = useDispatch();
  const navigate = useNavigate();
  useEffect(()=> {
      dispatch(getUser(id))
    },[dispatch,id])
  const handleEdit = () => {
    dispatch(setEditFormVisibility(true));
    navigate(PATH_DASHBOARD.user.edit(securityUser._id));
  }
//   const handleViewCustomer = (id) => {
//     navigate(PATH_DASHBOARD.user.list);
//   };
  const onDelete = async () => {
    await dispatch(deleteUser(id));
    dispatch(getUsers());
    navigate(PATH_DASHBOARD.user.list)
  }


  const defaultValues = useMemo(
    () => ({
      customer:                 securityUser?.customer.name || "",
      contact:                  securityUser?.contact?.firstName || "",
      name:                     securityUser?.name || "",
      phone:                    securityUser?.phone || "",
      email:                    securityUser?.email || "",
      login:                    securityUser?.login || "",
      roles:                    securityUser?.roles ,
      isActive:                 securityUser?.isActive,
      createdByFullName:        securityUser?.createdBy?.name ,
      createdAt:                securityUser?.createdAt ,
      createdIP:                securityUser?.createdIP ,
      updatedByFullName:        securityUser?.updatedBy?.name ,
      updatedAt:                securityUser?.updatedAt ,
      updatedIP:                securityUser?.updatedIP ,
    }
    ),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [securityUser] );

  return (
    <Grid sx={{ p: 3, mt: -3 }}>
      <Card sx={{ mb: 3, height: 160, position: 'relative' }}>
        <Cover
          photoURL={
            securityUser?.customer.name === 'HOWICK LTD.' ? (
              <LogoAvatar />
            ) : (
              'https://source.unsplash.com/random'
            )
          }
          name={defaultValues.name}
          icon="ph:users-light"
        />
      </Card>
        <Card sx={{ p: 3 }}>
        <Stack justifyContent="flex-end" direction="row" spacing={2} sx={{ mb: -4, mt:-1, mr:2}}>
              <Button
                onClick={() => handleEdit()}
                variant="outlined"
                startIcon={<Iconify icon="eva:edit-fill" />}
              >
                Edit
              </Button>
              { user.email !== securityUser.login ?
              <Button
                onClick={() => {
                  handleOpenConfirm();
                }}
                variant="outlined"
                color="error"
                startIcon={<Iconify icon="eva:trash-2-fill" />}
              >
                Delete
              </Button> : ""
              }
          </Stack>
          <ConfirmDialog
            open={openConfirm}
            onClose={handleCloseConfirm}
            title="Delete"
            content="Are you sure want to delete?"
            action={
              <Button variant="contained" color="error" onClick={onDelete}>
                Delete
              </Button>
            }
          />
          <Grid container>
            <ViewFormField sm={6} heading="Customer" param={defaultValues?.customer} isActive={defaultValues.isActive}/>
            <ViewFormField sm={6} heading="Contact" param={defaultValues?.contact} />
            <ViewFormField sm={6} heading="Full Name" param={defaultValues?.name} />
            <ViewFormField sm={6} heading="Phone" param={defaultValues?.phone} />
            <ViewFormField sm={12} heading="email" param={defaultValues?.email} />
            <ViewFormField sm={6} heading="Login" param={defaultValues?.login} />
            <ViewFormField sm={6} heading="Roles" param={defaultValues?.roles?.map((obj) => obj.name).join(', ')} />
          </Grid>
            <Switch sx={{mt:1}} checked = { defaultValues.isActive } disabled  />
          <Grid container>
            <ViewFormAudit defaultValues={defaultValues}/>
          </Grid>
        </Card>
    </Grid>

  );
}


